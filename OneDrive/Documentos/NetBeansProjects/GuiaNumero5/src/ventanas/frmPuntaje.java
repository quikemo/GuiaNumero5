/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ventanas;

import java.awt.event.KeyEvent;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author HP Pavilion X360
 */
public class frmPuntaje extends javax.swing.JFrame {

    DefaultComboBoxModel marca = new DefaultComboBoxModel();

    /**
     * Creates new form frmPuntaje
     */
    public frmPuntaje() {
        initComponents();
        this.setLocationRelativeTo(null);
        marca.addElement("seleccione una marca");
        marca.addElement("NEXUS");
        marca.addElement("GOOGLE");
        marca.addElement("LENOVO");
        marca.addElement("HUAWEI");
        marca.addElement("SONY");
        marca.addElement("APPLE");
        marca.addElement("SAMSUNG");
        marca.addElement("ALCATEL");
        marca.addElement("LG");
        marca.addElement("OTRO");
        cbxMarca.setModel(marca);
        //chkSecundaria.setEnabled(false);
        chkFlash.setEnabled(false);
        txtPixelajeP.setEnabled(false);
        txtPixelajeS.setEnabled(false);
        txaInfo.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblPuntaje = new javax.swing.JLabel();
        lblMarca = new javax.swing.JLabel();
        lblCPU = new javax.swing.JLabel();
        cbxMarca = new javax.swing.JComboBox<>();
        lblPantalla = new javax.swing.JLabel();
        lblCamaras = new javax.swing.JLabel();
        lblRAM = new javax.swing.JLabel();
        chkPrincipal = new javax.swing.JCheckBox();
        lblGarantia = new javax.swing.JLabel();
        chkSecundaria = new javax.swing.JCheckBox();
        lblPrecio = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtMah = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        chkFlash = new javax.swing.JCheckBox();
        txtCPU = new javax.swing.JTextField();
        txtPixelajeP = new javax.swing.JTextField();
        txtPantalla = new javax.swing.JTextField();
        txtPixelajeS = new javax.swing.JTextField();
        txtRAM = new javax.swing.JTextField();
        txtPrecio = new javax.swing.JTextField();
        btnEjecutar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txaInfo = new javax.swing.JTextArea();
        txtGarantia = new javax.swing.JTextField();
        jButtonVolverAlMenu = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblPuntaje.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblPuntaje.setText("Puntaje de moviles");
        getContentPane().add(lblPuntaje, new org.netbeans.lib.awtextra.AbsoluteConstraints(143, 11, -1, -1));

        lblMarca.setText("Marca");
        getContentPane().add(lblMarca, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 250, -1, -1));

        lblCPU.setText("CPU numero de nucleos");
        getContentPane().add(lblCPU, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 54, -1, -1));

        getContentPane().add(cbxMarca, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 249, 91, -1));

        lblPantalla.setText("Tamaño de pantalla");
        getContentPane().add(lblPantalla, new org.netbeans.lib.awtextra.AbsoluteConstraints(32, 85, -1, -1));

        lblCamaras.setText("Camaras:");
        getContentPane().add(lblCamaras, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, -1, -1));

        lblRAM.setText("Cantidad de RAM");
        getContentPane().add(lblRAM, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 137, -1, -1));

        chkPrincipal.setText("Principal");
        chkPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPrincipalActionPerformed(evt);
            }
        });
        getContentPane().add(chkPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 289, -1, -1));

        lblGarantia.setText("Tiempo de garantia");
        getContentPane().add(lblGarantia, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, -1, -1));

        chkSecundaria.setText("Secundaria");
        chkSecundaria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSecundariaActionPerformed(evt);
            }
        });
        getContentPane().add(chkSecundaria, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 289, -1, -1));

        lblPrecio.setText("Precio");
        getContentPane().add(lblPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 186, -1, -1));

        jLabel1.setText("Capacidad de la batería en mah");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 111, -1, -1));

        txtMah.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtMahKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMahKeyTyped(evt);
            }
        });
        getContentPane().add(txtMah, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 108, 136, -1));

        jLabel2.setText("Pixelaje");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 329, -1, -1));

        chkFlash.setText("Flash");
        getContentPane().add(chkFlash, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 289, -1, -1));

        txtCPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCPUActionPerformed(evt);
            }
        });
        txtCPU.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCPUKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCPUKeyTyped(evt);
            }
        });
        getContentPane().add(txtCPU, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 51, 135, -1));

        txtPixelajeP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPixelajePActionPerformed(evt);
            }
        });
        txtPixelajeP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPixelajePKeyTyped(evt);
            }
        });
        getContentPane().add(txtPixelajeP, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 329, 50, -1));

        txtPantalla.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPantallaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPantallaKeyTyped(evt);
            }
        });
        getContentPane().add(txtPantalla, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 82, 135, -1));

        txtPixelajeS.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPixelajeSKeyTyped(evt);
            }
        });
        getContentPane().add(txtPixelajeS, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 329, 72, -1));

        txtRAM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtRAMKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRAMKeyTyped(evt);
            }
        });
        getContentPane().add(txtRAM, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 134, 136, -1));

        txtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPrecioKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioKeyTyped(evt);
            }
        });
        getContentPane().add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 186, 136, -1));

        btnEjecutar.setText("Ejecutar");
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });
        getContentPane().add(btnEjecutar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 367, -1, -1));

        txaInfo.setColumns(20);
        txaInfo.setRows(5);
        jScrollPane1.setViewportView(txaInfo);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 401, 442, 131));

        txtGarantia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtGarantiaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtGarantiaKeyTyped(evt);
            }
        });
        getContentPane().add(txtGarantia, new org.netbeans.lib.awtextra.AbsoluteConstraints(234, 160, 136, -1));

        jButtonVolverAlMenu.setText("Volver al menu");
        jButtonVolverAlMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverAlMenuActionPerformed(evt);
            }
        });
        getContentPane().add(jButtonVolverAlMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(349, 367, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/FondoCeleste.jpg"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 480, 560));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void chkPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPrincipalActionPerformed
        // TODO add your handling code here:
        if (chkPrincipal.isSelected()) {
            txtPixelajeP.setEnabled(true);
            //chkSecundaria.setEnabled(true);
            chkFlash.setEnabled(true);
        } else {
            txtPixelajeP.setEnabled(false);
            //chkSecundaria.setEnabled(false);
            chkFlash.setEnabled(false);
        }
    }//GEN-LAST:event_chkPrincipalActionPerformed

    private void txtCPUKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCPUKeyPressed
        // TODO add your handling code here:
        
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int validar = Integer.parseInt(txtCPU.getText());
            if (validar <= 0 || validar > 12) {
                JOptionPane.showMessageDialog(null, "El numero ingreso en el campo no puede ser menor que 1 ni mayor a 12");
                txtCPU.requestFocus();
                txtCPU.setText("");
            } else {
                txtPantalla.requestFocus();
            }
        }
    }//GEN-LAST:event_txtCPUKeyPressed

    private void txtCPUKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCPUKeyTyped
        int limite = 1;
         if (!Character.isDigit(evt.getKeyChar())&&evt.getKeyChar() != '.'){
        evt.consume();
        }
        if(evt.getKeyChar()=='.' && txtCPU.getText().contains(".")){
        evt.consume();
        }
        if (txtCPU.getText().length() > limite) {
            evt.consume();
           
        }
        char dato = evt.getKeyChar();
        String cadena = "" + dato;
        
        if (!cadena.matches("[0-9]")) {
            evt.consume();
        }

    }//GEN-LAST:event_txtCPUKeyTyped

    private void txtPixelajePActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPixelajePActionPerformed
        

    }//GEN-LAST:event_txtPixelajePActionPerformed

    private void txtPantallaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPantallaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            double validar = Double.parseDouble(txtPantalla.getText());
            if (validar < 3 || validar > 6.7) {
                JOptionPane.showMessageDialog(null, "El numero ingreso en el campo no puede ser menor que 3 ni mayor a 6.7");
                txtPantalla.requestFocus();
                txtPantalla.setText("");
            } else {
                txtMah.requestFocus();
            }
        }
    }//GEN-LAST:event_txtPantallaKeyPressed

    private void txtPantallaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPantallaKeyTyped
        // TODO add your handling code here:
        int limite = 2;
if (!Character.isDigit(evt.getKeyChar())&&evt.getKeyChar() != '.'){
        evt.consume();
        }
        if(evt.getKeyChar()=='.' && txtPantalla.getText().contains(".")){
        evt.consume();
        }
        if (txtPantalla.getText().length() > limite) {
            evt.consume();
        }
        char dato = evt.getKeyChar();
        String cadena = "" + dato;
        if (!cadena.matches("[0-9.]")) {
            evt.consume();
        }

    }//GEN-LAST:event_txtPantallaKeyTyped

    private void txtRAMKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRAMKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            double validar = Double.parseDouble(txtRAM.getText());
            if (validar < 0.5 || validar > 6.0) {
                JOptionPane.showMessageDialog(null, "El numero ingreso en el campo no puede ser menor que 0.5 ni mayor a 6.0");
                txtRAM.requestFocus();
                txtRAM.setText("");
            } else {
                txtGarantia.requestFocus();
            }
        }
    }//GEN-LAST:event_txtRAMKeyPressed

    private void txtRAMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRAMKeyTyped
        // TODO add your handling code here:
        int limite = 2;

        if (txtRAM.getText().length() > limite) {
            evt.consume();
        }
        char dato = evt.getKeyChar();
        String cadena = "" + dato;
        if (!cadena.matches("[0-9.]")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtRAMKeyTyped

    private void txtPrecioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int validar = Integer.parseInt(txtPrecio.getText());
            if (validar < 0.01 || validar > 999.99) {
                JOptionPane.showMessageDialog(null, "El numero ingreso en el campo no puede ser menor que 0.1 ni mayor a 999.99");
                txtPrecio.requestFocus();
            } else {
                cbxMarca.requestFocus();
            }

        }
    }//GEN-LAST:event_txtPrecioKeyPressed

    private void txtPrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioKeyTyped
        // TODO add your handling code here:
        int limite = 5;

        if (txtPrecio.getText().length() > limite) {
            evt.consume();
        }
        char dato = evt.getKeyChar();
        String cadena = "" + dato;
        if (!cadena.matches("[0-9.]")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPrecioKeyTyped

    private void chkSecundariaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSecundariaActionPerformed
        // TODO add your handling code here:
        if (chkSecundaria.isSelected()) {
            txtPixelajeS.setEnabled(true);
        } else {
            txtPixelajeS.setEnabled(false);
        }
    }//GEN-LAST:event_chkSecundariaActionPerformed

    private void txtPixelajePKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPixelajePKeyTyped
        // TODO add your handling code here:
        int limite = 1;

        if (txtPixelajeP.getText().length() > limite) {
            evt.consume();
        }
        char dato = evt.getKeyChar();
        String cadena = "" + dato;
        if (!cadena.matches("[0-9]")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPixelajePKeyTyped

    private void txtPixelajeSKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPixelajeSKeyTyped
        // TODO add your handling code here:
        int limite = 1;

        if (txtPixelajeS.getText().length() > limite) {
            evt.consume();
        }
        char dato = evt.getKeyChar();
        String cadena = "" + dato;
        if (!cadena.matches("[0-9]")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPixelajeSKeyTyped

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed
        if ((txtRAM.getText().length() != 0) || (txtPantalla.getText().length() != 0) || (txtCPU.getText().length()!=0) || (txtGarantia.getText().length()!=0)||(txtMah.getText().length()!=0)||(txtPrecio.getText().length()!=0)){
            if(txtCPU.getText().length()==0){
            JOptionPane.showMessageDialog(null,"El Campo de CPU esta vacio porfavor llenelo");
            txtCPU.requestFocus();
        }if(txtPantalla.getText().length()==0){
            JOptionPane.showMessageDialog(null,"El Campo de Pantalla esta vacio porfavor llenelo");
            txtPantalla.requestFocus();
        }if(txtRAM.getText().length()==0){
            JOptionPane.showMessageDialog(null,"El Campo de RAM esta vacio porfavor llenelo");
            txtRAM.requestFocus();
        }if(txtPrecio.getText().length()==0){
            JOptionPane.showMessageDialog(null,"El Campo de Precio esta vacio porfavor llenelo");
            txtPrecio.requestFocus();
        }if(txtMah.getText().length()==0){
            JOptionPane.showMessageDialog(null,"El Campo de Bateria esta vacio porfavor llenelo");
            txtMah.requestFocus();
        }if(txtGarantia.getText().length()==0){
            JOptionPane.showMessageDialog(null,"El Campo de Garantia esta vacio porfavor llenelo");
            txtGarantia.requestFocus();
        }
        clsPuntaje puntaje = new clsPuntaje();
        int cpu, bateria, garantia;
        double pantalla, ram, precio;

        cpu = Integer.parseInt(txtCPU.getText());
        pantalla = Double.parseDouble(txtPantalla.getText());
        bateria = Integer.parseInt(txtMah.getText());
        ram = Double.parseDouble(txtRAM.getText());
        garantia = Integer.parseInt(txtGarantia.getText());
        precio = Double.parseDouble(txtPrecio.getText());

        if (txtCPU.getText().equals("") || cpu>12) {
            if (txtCPU.getText().equals("")){
                JOptionPane.showMessageDialog(null, "El campo del CPU no ha sido llenado");
            }else if(cpu>12){
                JOptionPane.showMessageDialog(null,"CPU no puede ser mayor a 12");
            }
            txtCPU.requestFocus();
        } else if (txtPantalla.getText().equals("") || pantalla<3||pantalla>6.7) {
            if (txtPantalla.getText().equals("")){
                JOptionPane.showMessageDialog(null, "El campo de la Pantalla no ha sido llenado");
            }else if(pantalla<3){
                JOptionPane.showMessageDialog(null,"Pantalla no puede ser menor a 3");
            }else if(pantalla<6.7){
                JOptionPane.showMessageDialog(null,"Pantalla no puede ser mayor a 6.7");
            }
            txtPantalla.requestFocus();
        } else if (txtGarantia.getText().equals("")|| garantia<1||garantia>24) {
            if (txtGarantia.getText().equals("")){
                JOptionPane.showMessageDialog(null, "El campo de la garantia no ha sido llenado");
            }else if(pantalla<1){
                JOptionPane.showMessageDialog(null,"garantia no puede ser menor a 1");
            }else if(pantalla<24){
                JOptionPane.showMessageDialog(null,"garantia no puede ser mayor a 24");
            }
            JOptionPane.showMessageDialog(null, "El campo de la Garantia no ha sido llenado");
            txtGarantia.requestFocus();
        } else if (txtMah.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "El campo de la bateria no ha sido llenado");
            txtMah.requestFocus();
        } else if (txtRAM.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "El campo de la RAM no ha sido llenado");
            txtRAM.requestFocus();
        } else if (txtPrecio.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "El campo del Precio no ha sido llenado");
            txtPrecio.requestFocus();
        } else if (cbxMarca.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "No ha seleccionado la marca");
            cbxMarca.requestFocus();
        } else if (chkPrincipal.isSelected()) {
            if (chkSecundaria.isSelected()) {
                if (chkFlash.isSelected()) {
                    int pixelP, pixelS, flash = 1;
                    pixelP = Integer.parseInt(txtPixelajeP.getText());
                    pixelS = Integer.parseInt(txtPixelajeS.getText());
                    String mensaje = "", marca;
                    marca = "" + cbxMarca.getSelectedItem();
                    mensaje = mensaje + "Nucleos del CPU: " + txtCPU.getText() + "\t   Tamaño de la pantalla: " + txtPantalla.getText() + "\t\n";
                    mensaje = mensaje + "Capacidad de bateria: " + txtMah.getText() + "\t   cantidad de memoria RAM" + txtRAM.getText() + "\t\n";
                    mensaje = mensaje + "Tiempo de garantia: " + txtGarantia.getText() + "\t   Precio: " + txtPrecio.getText() + "\t\n";
                    mensaje = mensaje + "marca: " + cbxMarca.getSelectedItem() + "\n";
                    mensaje = mensaje + "Posee camara:\t Principal " + pixelP + "\t Secundaria " + pixelS + "\t Flash si";
                    // mensaje = mensaje +  + "\n";
                    txaInfo.setText(mensaje);

                    puntaje.nucleoCpu(cpu);
                    puntaje.bateriaPantalla(pantalla, bateria);
                    puntaje.tamañoRam(ram);
                    puntaje.rangoGarantia(garantia);
                    puntaje.rangoPrecio(precio);
                    puntaje.refMarca(marca);
                    puntaje.pixelaje(pixelP, pixelS, flash);
                    puntaje.mostrar();
                } else {
                    int pixelP, pixelS, flash = 0;
                    pixelP = Integer.parseInt(txtPixelajeP.getText());
                    pixelS = Integer.parseInt(txtPixelajeS.getText());
                    String mensaje = "", marca;
                    marca = "" + cbxMarca.getSelectedItem();
                    mensaje = mensaje + "Nucleos del CPU: " + txtCPU.getText() + "   Tamaño de la pantalla: " + txtPantalla.getText() + "\n";
                    mensaje = mensaje + "Capacidad de bateria: " + txtMah.getText() + "   cantidad de memoria RAM" + txtRAM.getText() + "\n";
                    mensaje = mensaje + "Tiempo de garantia: " + txtGarantia.getText() + "   Precio: " + txtPrecio.getText() + "\n";
                    mensaje = mensaje + "marca: " + cbxMarca.getSelectedItem() + "\n";
                    mensaje = mensaje + "Posee camara: Principal " + pixelP + " Secundaria " + pixelS + " Flash no";
                    // mensaje = mensaje +  + "\n";
                    txaInfo.setText(mensaje);

                    puntaje.nucleoCpu(cpu);
                    puntaje.bateriaPantalla(pantalla, bateria);
                    puntaje.tamañoRam(ram);
                    puntaje.rangoGarantia(garantia);
                    puntaje.rangoPrecio(precio);
                    puntaje.refMarca(marca);
                    puntaje.pixelaje(pixelP, pixelS, flash);
                    puntaje.mostrar();
                }

            } else if (chkFlash.isSelected()) {
                int pixelP, pixelS, flash = 1;
                pixelP = Integer.parseInt(txtPixelajeP.getText());
                pixelS = 0;
                String mensaje = "", marca;
                marca = "" + cbxMarca.getSelectedItem();
                mensaje = mensaje + "Nucleos del CPU: " + txtCPU.getText() + "   Tamaño de la pantalla: " + txtPantalla.getText() + "\n";
                mensaje = mensaje + "Capacidad de bateria: " + txtMah.getText() + "   cantidad de memoria RAM" + txtRAM.getText() + "\n";
                mensaje = mensaje + "Tiempo de garantia: " + txtGarantia.getText() + "   Precio: " + txtPrecio.getText() + "\n";
                mensaje = mensaje + "marca: " + cbxMarca.getSelectedItem() + "\n";
                mensaje = mensaje + "Posee camara: Principal " + pixelP + " Secundaria no" + pixelS + " Flash si";
                // mensaje = mensaje +  + "\n";
                txaInfo.setText(mensaje);

                puntaje.nucleoCpu(cpu);
                puntaje.bateriaPantalla(pantalla, bateria);
                puntaje.tamañoRam(ram);
                puntaje.rangoGarantia(garantia);
                puntaje.rangoPrecio(precio);
                puntaje.refMarca(marca);
                puntaje.pixelaje(pixelP, pixelS, flash);
                puntaje.mostrar();
            } else {
                int pixelP, pixelS, flash = 0;
                pixelP = Integer.parseInt(txtPixelajeP.getText());
                pixelS = 0;
                String mensaje = "", marca;
                marca = "" + cbxMarca.getSelectedItem();
                mensaje = mensaje + "Nucleos del CPU: " + txtCPU.getText() + "   Tamaño de la pantalla: " + txtPantalla.getText() + "\n";
                mensaje = mensaje + "Capacidad de bateria: " + txtMah.getText() + "   cantidad de memoria RAM" + txtRAM.getText() + "\n";
                mensaje = mensaje + "Tiempo de garantia: " + txtGarantia.getText() + "   Precio: " + txtPrecio.getText() + "\n";
                mensaje = mensaje + "marca: " + cbxMarca.getSelectedItem() + "\n";
                mensaje = mensaje + "Posee camara: Principal " + pixelP + " Secundaria no" + pixelS + " Flash no";
                // mensaje = mensaje +  + "\n";
                txaInfo.setText(mensaje);

                puntaje.nucleoCpu(cpu);
                puntaje.bateriaPantalla(pantalla, bateria);
                puntaje.tamañoRam(ram);
                puntaje.rangoGarantia(garantia);
                puntaje.rangoPrecio(precio);
                puntaje.refMarca(marca);
                puntaje.pixelaje(pixelP, pixelS, flash);
                puntaje.mostrar();
            }

        } else {
            int pixelP, pixelS, flash = 0;
            pixelP = Integer.parseInt(txtPixelajeP.getText());
            pixelS = 0;
            String mensaje = "", marca;
            marca = "" + cbxMarca.getSelectedItem();
            mensaje = mensaje + "Nucleos del CPU: " + txtCPU.getText() + "   Tamaño de la pantalla: " + txtPantalla.getText() + "\n";
            mensaje = mensaje + "Capacidad de bateria: " + txtMah.getText() + "   cantidad de memoria RAM" + txtRAM.getText() + "\n";
            mensaje = mensaje + "Tiempo de garantia: " + txtGarantia.getText() + "   Precio: " + txtPrecio.getText() + "\n";
            mensaje = mensaje + "marca: " + cbxMarca.getSelectedItem() + "\n";
            mensaje = mensaje + "Posee camara: no";
            // mensaje = mensaje +  + "\n";
            txaInfo.setText(mensaje);

            puntaje.nucleoCpu(cpu);
            puntaje.bateriaPantalla(pantalla, bateria);
            puntaje.tamañoRam(ram);
            puntaje.rangoGarantia(garantia);
            puntaje.rangoPrecio(precio);
            puntaje.refMarca(marca);
            puntaje.mostrar();
        }
        
        }else{
            
        JOptionPane.showMessageDialog(null,"Todos los campos estan vacios\nNo puede dejar los campos vacios");
        
        }
        
                
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void txtGarantiaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGarantiaKeyTyped
        // TODO add your handling code here:
        int limite = 1;
        if (txtGarantia.getText().length() > limite) {
            evt.consume();
        }
        char dato = evt.getKeyChar();
        String cadena = "" + dato;
        if (!cadena.matches("[0-9]")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtGarantiaKeyTyped

    private void txtMahKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMahKeyTyped
        // TODO add your handling code here:
        int limite = 3;
if (!Character.isDigit(evt.getKeyChar())&&evt.getKeyChar() != '.'){
        evt.consume();
        }
        if(evt.getKeyChar()=='.' && txtCPU.getText().contains(".")){
        evt.consume();
        }
        if (txtMah.getText().length() > limite) {
            evt.consume();
        }
        char dato = evt.getKeyChar();
        String cadena = "" + dato;
        if (!cadena.matches("[0-9]")) {
            evt.consume();
        }
    }//GEN-LAST:event_txtMahKeyTyped

    private void txtMahKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMahKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int validar = Integer.parseInt(txtMah.getText());
            if (validar < 100 || validar > 5000) {
                JOptionPane.showMessageDialog(null, "El numero ingresado en el campo no puede ser menor que 100 ni mayor a 5000");
                txtMah.requestFocus();
                txtMah.setText("");
            } else {
                txtRAM.requestFocus();
            }
        }
    }//GEN-LAST:event_txtMahKeyPressed

    private void txtGarantiaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGarantiaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int validar = Integer.parseInt(txtGarantia.getText());
            if (validar < 1 || validar > 24) {
                JOptionPane.showMessageDialog(null, "El numero ingresado en el campo no puede ser menor que 1 ni mayor a 24");
                txtGarantia.requestFocus();
                txtGarantia.setText("");
            } else {
                txtPrecio.requestFocus();
            }
        }
    }//GEN-LAST:event_txtGarantiaKeyPressed

    private void txtCPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCPUActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCPUActionPerformed

    private void jButtonVolverAlMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverAlMenuActionPerformed
        menu pagina = new menu();
        this.setVisible(false);
        pagina.setVisible(true);
        pagina.setLocationRelativeTo(null);
    }//GEN-LAST:event_jButtonVolverAlMenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmPuntaje.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmPuntaje.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmPuntaje.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmPuntaje.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmPuntaje().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JComboBox<String> cbxMarca;
    private javax.swing.JCheckBox chkFlash;
    private javax.swing.JCheckBox chkPrincipal;
    private javax.swing.JCheckBox chkSecundaria;
    private javax.swing.JButton jButtonVolverAlMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCPU;
    private javax.swing.JLabel lblCamaras;
    private javax.swing.JLabel lblGarantia;
    private javax.swing.JLabel lblMarca;
    private javax.swing.JLabel lblPantalla;
    private javax.swing.JLabel lblPrecio;
    private javax.swing.JLabel lblPuntaje;
    private javax.swing.JLabel lblRAM;
    private javax.swing.JTextArea txaInfo;
    private javax.swing.JTextField txtCPU;
    private javax.swing.JTextField txtGarantia;
    private javax.swing.JTextField txtMah;
    private javax.swing.JTextField txtPantalla;
    private javax.swing.JTextField txtPixelajeP;
    private javax.swing.JTextField txtPixelajeS;
    private javax.swing.JTextField txtPrecio;
    private javax.swing.JTextField txtRAM;
    // End of variables declaration//GEN-END:variables
}
